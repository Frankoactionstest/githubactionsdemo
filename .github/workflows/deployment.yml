name: "Deploy Resource Group"
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ] 

  workflow_dispatch:

jobs:
  Plan_Dev:
    if: github.ref == 'refs/heads/Workingdirectory'
    uses: Frankoactionstest/githubactionsdemo/actions/workflows/TF_Plan.yml@Workingdirectory
    with:
      path: modules/RG
      tf_vars_file: dev.tfvars
      gh_environment: DEV
    secrets:
      ARM_CLIENT_SECRET: ${{ secrets.SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTIONID }}
      RESOURCE_GROUP: ${{ secrets.DEV_RG }}
      ARM_TENANT_ID: ${{ secrets.TENANTID }}
      STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}
      CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}      

  Deploy_Dev:
    needs: Plan_Dev
    uses: Frankoactionstest/githubactionsdemo/actions/workflows/TF_Apply.yml@Workingdirectory
    with:
      path: modules/RG
      tf_vars_file: dev.tfvars
      gh_environment: DEV
    secrets:
      ARM_CLIENT_SECRET: ${{ secrets.SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTIONID }}
      RESOURCE_GROUP: ${{ secrets.DEV_RG }}
      ARM_TENANT_ID: ${{ secrets.TENANTID }}
      STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}
      CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}      

  Plan_Uat:
    if: github.ref == 'refs/heads/main'
    uses: Frankoactionstest/githubactionsdemo/actions/workflows/TF_Plan.yml@Workingdirectory
    with:
      path: modules/RG
      tf_vars_file: uat.tfvars
      gh_environment: UAT
    secrets:
      ARM_CLIENT_SECRET: ${{ secrets.SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTIONID }}
      RESOURCE_GROUP: ${{ secrets.UAT_RG }}
      ARM_TENANT_ID: ${{ secrets.TENANTID }}
      STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}
      CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}      

  Deploy_Uat:
    needs: Plan_Uat
    uses: Frankoactionstest/githubactionsdemo/actions/workflows/TF_Apply.yml@Workingdirectory
    with:
      path: modules/RG
      tf_vars_file: uat.tfvars
      gh_environment: UAT
    secrets:
      ARM_CLIENT_SECRET: ${{ secrets.SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTIONID }}
      RESOURCE_GROUP: ${{ secrets.UAT_RG }}
      ARM_TENANT_ID: ${{ secrets.TENANTID }}
      STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}
      CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}





































# name: 'CI using Terraform'

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

#   workflow_dispatch:

# jobs:
#     terraform:
#       name: 'Terraform'
#       runs-on: ubuntu-latest
#       env:
#         ARM_CLIENT_ID: ${{ secrets.CLIENTID }}
#         ARM_CLIENT_SECRET: ${{ secrets.SECRET }}
#         ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTIONID }}
#         ARM_TENANT_ID: ${{ secrets.TENANTID }}
#         STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}
#         CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
        
#       defaults:
#        run:
#         shell: bash  

#     DEV_Plan:
#       name: 'Plan DEV'
#       runs-on: ubuntu-latest
#       needs: terraform
#       with: 
#         path: ./
#       environment: 
#         names: DEV
#       env:
#         RESOURCE_GROUP_NAME: ${{ secrets.DEV_RG }}        

#       steps:
#           - name: Checkout
#             uses: actions/checkout@v4.1.1
          
#           - name: Setup Terraform
#             uses: hashicorp/setup-terraform@v2.0.3
#             with:
#              terraform_version: 1.7.5

#           - name: Terraform Init
#             run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP_NAME"   

#           - name: Terraform Plan   
#             run: terraform plan -var-file "./dev.tfvars" -out=tfplan -no-color

#     UAT_Plan:
#       name: 'Plan UAT'
#       runs-on: ubuntu-latest      
#       environment:
#         name: UAT    
#       env:
#         RESOURCE_GROUP_NAME: ${{ secrets.DEV_RG }} 
      
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4.1.1
      
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2.0.3
#         with:
#           terraform_version: 1.7.5

#       - name: Terraform Init
#         run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP_NAME"   

#       - name: Terraform Plan   
#         run: terraform plan -var-file "./dev.tfvars" -out=tfplan -no-color

#   - name: Terraform Apply
#         if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#         run: terraform apply "tfplan"